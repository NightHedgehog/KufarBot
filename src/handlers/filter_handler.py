from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import F, Router

from src.keyboards.filter_keyboard import generate_model_keyboard, price_menu
from src.keyboards.main_keyboard import main_menu, MainKeyboardButtons

from src.database.connection import connection

router = Router()
users_collection = connection["users"]


# üëâ –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π (FSM)
class FilterState(StatesGroup):
    choosing_model = State()
    choosing_price = State()
    selecting_for_deletion = State()

########################################################################################################################

# üì• –ö–æ–º–∞–Ω–¥–∞ ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä
@router.message(F.text == MainKeyboardButtons.ADD_FILTER.value)
async def add_filter_command(message: Message, state: FSMContext):
    iphone_menu = await generate_model_keyboard()
    await message.answer(
        "üìù –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
        reply_markup=iphone_menu
    )
    await state.set_state(FilterState.choosing_model)


# üí¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –º–æ–¥–µ–ª—å
@router.callback_query(FilterState.choosing_model, F.data.startswith("phm="))
async def handle_model_choice(callback: CallbackQuery, state: FSMContext):
    phm_title = callback.data.split("=")[1]
    phm_value = callback.data.split("=")[2]
    await state.update_data(title=phm_title, phm=phm_value)

    await callback.message.edit_text(
        "üí∞ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã:",
        reply_markup=price_menu)
    await state.set_state(FilterState.choosing_price)
    await callback.answer()


# üí¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Ç–æ–∏–º–æ—Å—Ç—å
@router.callback_query(FilterState.choosing_price, F.data.startswith("prc="))
async def handle_price_choice(callback: CallbackQuery, state: FSMContext):
    prc_value = callback.data.split("=")[1]
    data = await state.get_data()
    phm = data.get("phm")
    title = data.get("title")

    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
    filter_entry = {
        "title": title,
        "params": {
            "phm": phm,
            "prc": prc_value
        }
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MongoDB
    await users_collection.update_one(
        {"_id": callback.from_user.id},
        {"$push": {"filters": filter_entry}},
        upsert=True
    )

    await callback.message.edit_text("‚úÖ –§–∏–ª—å—Ç—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    await callback.message.answer("üîΩ –ú–µ–Ω—é", reply_markup=main_menu)
    await state.clear()
    await callback.answer()

# üí¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –æ—Ç–º–µ–Ω–∞
@router.callback_query(FilterState.choosing_model, F.data == "cancel_add_filter")
async def back_to_models(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer("üîΩ –ú–µ–Ω—é", reply_markup=main_menu)
    await state.clear()
    await callback.answer()

# üí¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞–∑–∞–¥
@router.callback_query(FilterState.choosing_price, F.data == "back_to_models")
async def back_to_models(callback: CallbackQuery, state: FSMContext):
    iphone_menu = await generate_model_keyboard()
    await callback.message.edit_text(
        "üìù –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:",
        reply_markup=iphone_menu
    )
    await state.set_state(FilterState.choosing_model)
    await callback.answer()

########################################################################################################################

async def render_filter_selection_keyboard(user_id: int, selected_indexes: list[int]) -> InlineKeyboardMarkup:
    user = await users_collection.find_one({"_id": user_id})
    filters = user.get("filters", [])
    keyboard = []

    for i, f in enumerate(filters):
        title = f.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        prc = int(f["params"]["prc"].split(",")[1]) / 100
        checked = "‚úÖ" if i in selected_indexes else "‚òê"
        text = f"{checked} {title} ‚Äî –¥–æ {int(prc)} BYN"
        keyboard.append([InlineKeyboardButton(text=text, callback_data=f"toggle_select:{i}")])

    # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
    if selected_indexes:
        keyboard.append([
            InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", callback_data="confirm_deletion")
        ])

    # –ù–∞–∑–∞–¥
    keyboard.append([
        InlineKeyboardButton(text="‚úÖ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")
    ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# üì• –ö–æ–º–∞–Ω–¥–∞ üéØ –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã
@router.message(F.text == "üéØ –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã")
async def show_filter_selection(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user = await users_collection.find_one({"_id": user_id})

    if not user or not user.get("filters"):
        await message.answer(
            "üîç –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤.",
            reply_markup=main_menu
        )
        return

    await state.set_state(FilterState.selecting_for_deletion)
    await state.update_data(selected=[])
    markup = await render_filter_selection_keyboard(message.from_user.id, [])
    await message.answer("üìÑ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã", reply_markup=markup)


@router.callback_query(FilterState.selecting_for_deletion, F.data.startswith("toggle_select:"))
async def toggle_filter(callback: CallbackQuery, state: FSMContext):
    index = int(callback.data.split(":")[1])
    data = await state.get_data()
    selected = data.get("selected", [])

    if index in selected:
        selected.remove(index)
    else:
        selected.append(index)

    await state.update_data(selected=selected)

    # –û–±–Ω–æ–≤–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = await render_filter_selection_keyboard(callback.from_user.id, selected)
    await callback.message.edit_reply_markup(reply_markup=markup)
    await callback.answer()


@router.callback_query(FilterState.selecting_for_deletion, F.data == "confirm_deletion")
async def confirm_deletion(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected = data.get("selected", [])

    user_id = callback.from_user.id
    user = await users_collection.find_one({"_id": user_id})
    filters = user.get("filters", [])

    # –£–¥–∞–ª–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
    filters = [f for i, f in enumerate(filters) if i not in selected]

    await users_collection.update_one(
        {"_id": user_id},
        {"$set": {"filters": filters}}
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await state.update_data(selected=[])  # –æ—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä
    updated_keyboard = await render_filter_selection_keyboard(user_id, [])

    await callback.message.edit_text(
        "‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã —É–¥–∞–ª–µ–Ω—ã\nüìÑ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤:",
        reply_markup=updated_keyboard
    )
    await callback.answer()

# @router.callback_query(FilterState.selecting_for_deletion, F.data == "back_to_main"):
# üí¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –æ—Ç–º–µ–Ω–∞
@router.callback_query(FilterState.selecting_for_deletion, F.data == "back_to_main")
async def back_to_models(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer("üîΩ –ú–µ–Ω—é", reply_markup=main_menu)
    await state.clear()
    await callback.answer()
